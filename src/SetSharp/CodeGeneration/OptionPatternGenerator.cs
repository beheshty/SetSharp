using SetSharp.Models;
using System.Reflection;
using System.Text;

namespace SetSharp.CodeGeneration
{
    internal static class OptionsPatternGenerator
    {
        internal static string Generate(List<SettingClassInfo> classes)
        {
            var pocoNameSpace = "SetSharp.Configuration";
            var assemblyVersion = Assembly.GetExecutingAssembly().GetName().Version.ToString();

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using Microsoft.Extensions.Configuration;");
            sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
            sb.AppendLine($"using {pocoNameSpace};");
            sb.AppendLine();
            sb.AppendLine("namespace Microsoft.Extensions.DependencyInjection");
            sb.AppendLine("{");
            sb.AppendLine($"    [System.CodeDom.Compiler.GeneratedCode(\"SetSharp\", \"{assemblyVersion}\")]");
            sb.AppendLine("    public static class GeneratedOptionsExtensions");
            sb.AppendLine("    {");

            var optionClasses = classes.Where(c => !string.IsNullOrEmpty(c.SectionPath)).ToList();

            AppendAddOptionMethods(sb, optionClasses);

            if (optionClasses.Any())
            {
                AppendAddAllOptionsMethod(sb, optionClasses);
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            return sb.ToString();
        }

        private static void AppendAddAllOptionsMethod(StringBuilder sb, List<SettingClassInfo> optionClasses)
        {
            sb.AppendLine("        /// <summary>Registers all generated configuration classes with the dependency injection container.</summary>");
            sb.AppendLine("        public static IServiceCollection AddAllGeneratedOptions(this IServiceCollection services, IConfiguration configuration)");
            sb.AppendLine("        {");
            foreach (var classInfo in optionClasses)
            {
                sb.AppendLine($"            services.Add{classInfo.ClassName}(configuration);");
            }
            sb.AppendLine("            return services;");
            sb.AppendLine("        }");
        }

        private static void AppendAddOptionMethods(StringBuilder sb, List<SettingClassInfo> optionClasses)
        {
            foreach (var classInfo in optionClasses)
            {
                sb.AppendLine($"        /// <summary>Registers the <see cref=\"{classInfo.ClassName}\"/> class with the dependency injection container.</summary>");
                sb.AppendLine($"        public static IServiceCollection Add{classInfo.ClassName}(this IServiceCollection services, IConfiguration configuration)");
                sb.AppendLine("        {");
                sb.AppendLine($"            services.Configure<{classInfo.ClassName}>(configuration.GetSection({classInfo.ClassName}.SectionName));");
                sb.AppendLine("            return services;");
                sb.AppendLine("        }");
                sb.AppendLine();
            }
        }
    }
}
